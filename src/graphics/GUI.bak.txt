package graphics;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.*;
import javax.swing.*;

import structures.NumberButton;

import net.miginfocom.swing.MigLayout;

public class GUIBak {

	private static final long serialVersionUID = 1L;
	private JFrame window;
	private JLabel console;
	private JLabel entry;
	private final Font segoeUI = new Font("Segoe UI", Font.BOLD, 33);
	private final Dimension defaultButtonSize = new Dimension(96, 66);

	public GUIBak(String windowTitle, int x, int y, int width, int height) {
		createWindow(windowTitle, x, y, width, height);
	}

	public GUIBak(String windowTitle) {
		createWindow(windowTitle, 320, 180, 1280, 720);
	}

	private void createWindow(String windowTitle, int x, int y, int width, int height) {
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

		window = new JFrame(windowTitle);
		window.setBounds(x, y, width, height);
		window.setResizable(false);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


		JPanel consolePanel = new JPanel(new MigLayout("", "[:100%:]", "[25px]"));
		window.add(consolePanel, BorderLayout.SOUTH);
		console = new JLabel("Placeholder Text", SwingConstants.CENTER);
		console.setVisible(false);
		consolePanel.add(console, "cell 0 0,alignx center,aligny center");

		JPanel userInterface = new JPanel(new MigLayout("", "[:100%:]", "[50px]"));
		window.add(userInterface, BorderLayout.NORTH);

		entry = new JLabel("0", SwingConstants.RIGHT);
		entry.setFont(segoeUI.deriveFont(30f));
		userInterface.add(entry, "alignx right, aligny center");
		final Boolean[] entryIsZero = {true};

		JPanel buttonPanel = new JPanel(new MigLayout("", "-1[:96px:]", "-1[:66px:]"));
		window.add(buttonPanel, BorderLayout.CENTER);
		buttonPanel.setFocusable(true);

		/*Circle circle = new Circle();
		window.add(circle, BorderLayout.CENTER); //any graphics will be in center*/
		//circle.setForeground(new Color(0,44,128,250)); //change circle foreground
		//System.out.println(screenSize.width + " + " + window.getWidth());

		NumberButton newButton = new NumberButton();


		JButton decimal = new JButton(".");
		decimal.setPreferredSize(defaultButtonSize);
		final Boolean[] decimalInEntry = {false};
		decimal.setFont(segoeUI);
		decimal.addActionListener(action -> {
			if (!decimalInEntry[0] && entryIsZero[0]) {
				entry.setText("0.");
				decimalInEntry[0] = true;
			} else if (!decimalInEntry[0]) {
				entry.setText(entry.getText() + '.');
				decimalInEntry[0] = true;
			}
		});
		buttonPanel.add(decimal, "cell 2 4");
		decimal.setFocusable(false);
		decimal.setFocusPainted(false);

		JButton zero = new JButton("0");
		zero.setPreferredSize(defaultButtonSize);
		zero.setFont(segoeUI);
		zero.addActionListener(action -> {
			if (!entryIsZero[0]) entry.setText(entry.getText() + '0');
		});
		buttonPanel.add(zero, "cell 1 4");
		zero.setFocusable(false);
		zero.setFocusPainted(false);

		JButton plusMinus = new JButton("±");
		plusMinus.setPreferredSize(defaultButtonSize);
		final Boolean[] entryIsNegative = {false};
		plusMinus.setFont(segoeUI);
		plusMinus.addActionListener(action -> {
			if (!entryIsNegative[0] && !entryIsZero[0]) {
				entry.setText('-' + entry.getText());
				entryIsNegative[0] = true;
			} else if (!entryIsZero[0]) {
				entry.setText(entry.getText().substring(1));
				entryIsNegative[0] = false;
			}
		});
		buttonPanel.add(plusMinus, "cell 0 4");
		plusMinus.setFocusable(false);
		plusMinus.setFocusPainted(false);

		JButton one = new JButton("1");
		one.setPreferredSize(defaultButtonSize);
		one.setFont(segoeUI);
		one.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("1");
			} else {
				entry.setText(entry.getText() + '1');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(one, "cell 0 3");
		one.setFocusable(false);
		one.setFocusPainted(false);

		JButton two = new JButton("2");
		two.setFont(segoeUI);
		two.setPreferredSize(defaultButtonSize);
		two.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("2");
			} else {
				entry.setText(entry.getText() + '2');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(two, "cell 1 3");
		two.setFocusable(false);
		two.setFocusPainted(false);

		JButton three = new JButton("3");
		three.setPreferredSize(defaultButtonSize);
		three.setFont(segoeUI);
		three.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("3");
			} else {
				entry.setText(entry.getText() + '3');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(three, "cell 2 3");
		three.setFocusable(false);
		three.setFocusPainted(false);

		JButton four = new JButton("4");
		four.setPreferredSize(defaultButtonSize);
		four.setFont(segoeUI);
		four.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("4");
			} else {
				entry.setText(entry.getText() + '4');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(four, "cell 0 2");
		four.setFocusable(false);
		four.setFocusPainted(false);

		JButton five = new JButton("5");
		five.setPreferredSize(defaultButtonSize);
		five.setMaximumSize(defaultButtonSize);
		five.setMinimumSize(defaultButtonSize);
		//font size 33
		five.setFont(new Font("Segoe UI",Font.BOLD,33));
		five.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("5");
			} else {
				entry.setText(entry.getText() + '5');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(five, "cell 1 2");
		five.setFocusable(false);
		five.setFocusPainted(false);

		JButton six = new JButton("6");
		six.setPreferredSize(defaultButtonSize);
		six.setFont(segoeUI);
		six.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("6");
			} else {
				entry.setText(entry.getText() + '6');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(six, "cell 2 2");
		six.setFocusable(false);
		six.setFocusPainted(false);

		JButton seven = new JButton("7");
		seven.setPreferredSize(defaultButtonSize);
		seven.setFont(segoeUI);
		seven.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("7");
			} else {
				entry.setText(entry.getText() + '7');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(seven, "cell 0 1");
		seven.setFocusable(false);
		seven.setFocusPainted(false);

		JButton eight = new JButton("8");
		eight.setPreferredSize(defaultButtonSize);
		eight.setFont(segoeUI);
		eight.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("8");
			} else {
				entry.setText(entry.getText() + '8');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(eight, "cell 1 1");
		eight.setFocusable(false);
		eight.setFocusPainted(false);

		JButton nine = new JButton("9");
		nine.setPreferredSize(defaultButtonSize);
		nine.setFont(segoeUI);
		nine.addActionListener(action -> {
			if (entryIsZero[0] && !decimalInEntry[0]) {
				entryIsZero[0] = false;
				entry.setText("9");
			} else {
				entry.setText(entry.getText() + '9');
				entryIsZero[0] = false;
			}
		});
		buttonPanel.add(nine, "cell 2 1");
		nine.setFocusable(false);
		nine.setFocusPainted(false);

		JButton clearEntry = new JButton("CE");
		clearEntry.setPreferredSize(defaultButtonSize);
		//font size 20
		clearEntry.setFont(segoeUI.deriveFont(Font.PLAIN,33f));
		clearEntry.addActionListener(action -> {
			entry.setText("0");
			entryIsZero[0] = true;
			entryIsNegative[0] = false;
			decimalInEntry[0] = false;
		});
		buttonPanel.add(clearEntry, "cell 0 0");
		clearEntry.setFocusable(false);
		clearEntry.setFocusPainted(false);



		JButton clear = new JButton("C");
		clear.setPreferredSize(defaultButtonSize);
		clear.setFont(segoeUI.deriveFont(Font.PLAIN,33f));
		clear.addActionListener(action -> clear());
		buttonPanel.add(clear, "cell 1 0");
		clear.setFocusable(false);
		clear.setFocusPainted(false);

		JButton delete = new JButton("?");
		delete.setPreferredSize(defaultButtonSize);
		delete.setFont(segoeUI.deriveFont(Font.PLAIN,33f));
		delete.addActionListener(action-> delete(entryIsZero, entryIsNegative, decimalInEntry, entry));
		buttonPanel.add(delete, "cell 2 0");
		delete.setFocusable(false);
		delete.setFocusPainted(false);

		buttonPanel.addKeyListener(new KeyListener() {
			//KeyListeners for chars
			@Override
			public void keyTyped(KeyEvent e) {
				if (entryIsZero[0] && !decimalInEntry[0]) switch (e.getKeyChar()) {
					case '0':
						break;
					case '1':
						entry.setText("1");
						entryIsZero[0] = false;
						break;
					case '2':
						entry.setText("2");
						entryIsZero[0] = false;
						break;
					case '3':
						entry.setText("3");
						entryIsZero[0] = false;
						break;
					case '4':
						entry.setText("4");
						entryIsZero[0] = false;
						break;
					case '5':
						entry.setText("5");
						entryIsZero[0] = false;
						break;
					case '6':
						entry.setText("6");
						entryIsZero[0] = false;
						break;
					case '7':
						entry.setText("7");
						entryIsZero[0] = false;
						break;
					case '8':
						entry.setText("8");
						entryIsZero[0] = false;
						break;
					case '9':
						entry.setText("9");
						entryIsZero[0] = false;
						break;
					case '.':
						entry.setText("0.");
						decimalInEntry[0] = true;
						break;
				}
				else switch (e.getKeyChar()) {
					case '0':
						entry.setText(entry.getText() + '0');
						entryIsZero[0] = false;
						break;
					case '1':
						entry.setText(entry.getText() + '1');
						entryIsZero[0] = false;
						break;
					case '2':
						entry.setText(entry.getText() + '2');
						entryIsZero[0] = false;
						break;
					case '3':
						entry.setText(entry.getText() + '3');
						entryIsZero[0] = false;
						break;
					case '4':
						entry.setText(entry.getText() + '4');
						entryIsZero[0] = false;
						break;
					case '5':
						entry.setText(entry.getText() + '5');
						entryIsZero[0] = false;
						break;
					case '6':
						entry.setText(entry.getText() + '6');
						entryIsZero[0] = false;
						break;
					case '7':
						entry.setText(entry.getText() + '7');
						entryIsZero[0] = false;
						break;
					case '8':
						entry.setText(entry.getText() + '8');
						entryIsZero[0] = false;
						break;
					case '9':
						entry.setText(entry.getText() + '9');
						entryIsZero[0] = false;
						break;
					case '.':
						if (!decimalInEntry[0]) {
							entry.setText(entry.getText() + '.');
							decimalInEntry[0] = true;
						}
						break;
				}
			}

			//KeyListeners for function keys/anything not a normal key
			@Override
			public void keyPressed(KeyEvent e) {
				switch (e.getKeyCode()) {
					case KeyEvent.VK_F9:
						if (!entryIsNegative[0] && !entryIsZero[0]) {
							entry.setText("-" + entry.getText());
							entryIsNegative[0] = true;
						} else if (!entryIsZero[0]) {
							entry.setText(entry.getText().substring(1));
							entryIsNegative[0] = false;
						}
						break;
					case KeyEvent.VK_ESCAPE:
						clear();
						break;
					case KeyEvent.VK_BACK_SPACE:
						delete(entryIsZero, entryIsNegative, decimalInEntry, entry);
						break;
				}
			}

			@Override
			public void keyReleased(KeyEvent e) {
			}
		});
	}

	private static void delete(Boolean[] entryIsZero, Boolean[] entryIsNegative, Boolean[] decimalInEntry, JLabel entry) {
		if (!entryIsZero[0]){
			if (entry.getText().charAt(entry.getText().length()-1) == '.'){
				decimalInEntry[0] = false;
			}
			entry.setText(entry.getText().substring(0,entry.getText().length()-1));
			if (entry.getText().length() == 1 && entryIsNegative[0]){
				entry.setText("0");
				entryIsZero[0] = true;
				entryIsNegative[0] = false;
			}
			if (entry.getText().length() == 0 && !entryIsNegative[0]){
				entry.setText("0");
				entryIsZero[0] = true;
			}
		}
	}

	private void clear() {
		System.out.println("CALCULATOR CLEARED");
	}

	private void disableButtons(){

	}

	public void setWindowName(String windowName) {
		window.setTitle(windowName);
	}

	public void setVisibility(boolean b) {
		window.setVisible(b);
	}

	private void updateWindow() {
		window.revalidate();
		window.repaint();
	}
}
